using MiraAPI.Events;
using MiraAPI.Events.Mira;
using MiraAPI.Events.Vanilla.Gameplay;
using MiraAPI.Hud;
using MiraAPI.Modifiers;
using MiraAPI.Networking;
using TownOfSushi.Modifiers;

namespace TownOfSushi.Events;

public static class InvulnerabilityEvents
{
    [RegisterEvent(0)]
    public static void MiraButtonClickEventHandler(MiraButtonClickEvent @event)
    {
        var button = @event.Button as CustomActionButton<PlayerControl>;
        var source = PlayerControl.LocalPlayer;
        var target = button?.Target;

        if (target == null || button == null || !button.CanClick())
        {
            return;
        }

        CheckForInvulnerability(@event, source, target, false);
    }

    [RegisterEvent(0)]
    public static void BeforeMurderEventHandler(BeforeMurderEvent @event)
    {
        var source = @event.Source;
        var target = @event.Target;

        CheckForInvulnerability(@event, source, target, true);
    }

    private static void CheckForInvulnerability(MiraCancelableEvent miraEvent, PlayerControl source,
        PlayerControl target, bool killAttempt)
    {
        if (MeetingHud.Instance || ExileController.Instance)
        {
            return;
        }

        if (target.TryGetModifier<InvulnerabilityModifier>(out var invic) && target != source &&
            !source.HasModifier<IgnoreInvulnerabilityModifier>())
        {
            if (invic.StopInteractions || killAttempt)
            {
                miraEvent.Cancel();
            }

            // prevents stuff like pest being killed by something like bomber
            if (source.AmOwner && ((invic.AttackMurderer && killAttempt) || invic.AttackAllInteractions) &&
                !source.HasModifier<IndirectAttackerModifier>())
            {
                target.RpcCustomMurder(source);
            }
        }
    }
}